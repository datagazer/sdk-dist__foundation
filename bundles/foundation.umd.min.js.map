{"version":3,"sources":["ng://@datagazer/foundation/lib/classes/style-builder.ts","ng://@datagazer/foundation/lib/directives/elevation.directive.ts","ng://@datagazer/foundation/lib/directives/typography.directive.ts","ng://@datagazer/foundation/lib/services/type.service.ts","ng://@datagazer/foundation/lib/foundation.module.ts"],"names":["StyleBuilder","_elementRef","_keyValueDiffers","_renderer","_type","this","_differ","find","create","Object","defineProperty","prototype","value","input","toString","changes","diff","build","_applyChanges","_this","forEachItem","_a","style","key","currentValue","setStyle","nativeElement","RendererStyleFlags2","DashCase","ElevationDirective","_super","__extends","box-shadow","__decorate","Directive","selector","inputs","TypographyDirective","font-size","line-height","font-weight","font-family","letter-spacing","__decorate$1","TypeService","isVoid","undefined","String","toNumber","Number","toBoolean","Boolean","toDate","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","__decorate$2","Injectable","providedIn","directives","FoundationModule","__decorate$3","NgModule","imports","exports","__spread","declarations"],"mappings":"+UAmBE,SAAAA,EACUC,EACAC,EACAC,EAEAC,GAJAC,KAAAJ,YAAAA,EACAI,KAAAH,iBAAAA,EACAG,KAAAF,UAAAA,EAEAE,KAAAD,MAAAA,EAPFC,KAAAC,QAAiDD,KAAKH,iBAAiBK,KAAK,IAAIC,SAiB1F,OA7BEC,OAAAC,eAAWV,EAAAW,UAAA,QAAK,KAAhB,SAAiBC,GACf,IAAIC,EAAQR,KAAKD,MAAMU,SAASF,GAG1BG,EAAUV,KAAKC,QAAQU,KAAKH,EAAQR,KAAKY,MAAMJ,GAAS,IAExDE,GACFV,KAAKa,cAAcH,oCAiBjBf,EAAAW,UAAAO,cAAR,SAAsBH,GAAtB,IAAAI,EAAAd,KACEU,EAAQK,YAAY,SAACC,OAAEC,EAAAD,EAAAE,IAAYX,EAAAS,EAAAG,aACjCL,EAAKhB,UAAUsB,SAASN,EAAKlB,YAAYyB,cAAeJ,EAAOV,EAAOe,EAAAA,oBAAoBC,aAGhG5B,4qBClCA6B,EAAA,SAAAC,GAWA,SAAAD,mDAMA,OANwCE,EAAAF,EAAAC,GAC/BD,EAAAlB,UAAAM,MAAP,SAAaJ,GACX,MAAO,CACLmB,aAAc,oBAAoBnB,EAAK,kBAHhCgB,EAAkBI,EAAA,CAP9BC,EAAAA,UAAU,CACTC,SAAU,gBAEVC,OAAQ,CACN,yBAGSP,GAXb,CAWwC7B,isBCXxCqC,EAAA,SAAAP,GAWA,SAAAO,mDAUA,OAVyCN,EAAAA,EAAAA,GAChCM,EAAA1B,UAAAM,MAAP,SAAaJ,GACX,MAAO,CACLyB,YAAa,oBAAoBzB,EAAK,eACtC0B,cAAe,oBAAoB1B,EAAK,iBACxC2B,cAAe,oBAAoB3B,EAAK,iBACxC4B,cAAe,oBAAoB5B,EAAK,iBACxC6B,iBAAkB,oBAAoB7B,EAAK,sBAPpCwB,EAAmBM,EAAA,CAP/BT,EAAAA,UAAU,CACTC,SAAU,iBAEVC,OAAQ,CACN,0BAGSC,GAXb,CAWyCrC,gWCXzC4C,EAAA,WAKA,SAAAA,YACSA,EAAAjC,UAAAkC,OAAP,SAAcjC,GACZ,OAAOA,IAAUkC,WAAuB,OAAVlC,GAGzBgC,EAAAjC,UAAAG,SAAP,SAAgBF,GACd,OAAKP,KAAKwC,OAAOjC,GAIV,KAHEmC,OAAOnC,IAMXgC,EAAAjC,UAAAqC,SAAP,SAAgBpC,GACd,OAAKP,KAAKwC,OAAOjC,GAIV,KAHEqC,OAAOrC,IAMXgC,EAAAjC,UAAAuC,UAAP,SAAiBtC,GACf,OAAKP,KAAKwC,OAAOjC,GAQV,KAPgB,iBAAVA,EACQ,UAAVA,EAGFuC,QAAQvC,IAMZgC,EAAAjC,UAAAyC,OAAP,SAAcxC,GACZ,IAAKP,KAAKwC,OAAOjC,GAAQ,CACvB,IAAIyC,EAAO,IAAIC,KAAK1C,GAEpB,OAAO,IAAI0C,KACTA,KAAKC,IACHF,EAAKG,cACLH,EAAKI,WACLJ,EAAKK,UACLL,EAAKM,WACLN,EAAKO,aACLP,EAAKQ,aACLR,EAAKS,oBAKX,OAAO,2GAlDElB,EAAWmB,EAAA,CAHvBC,EAAAA,WAAW,CACVC,WAAY,UAEDrB,GALb,gwBCMMsB,EAA6B,CACjCrC,EACAQ,GAgBF8B,EAAA,WAAA,SAAAA,KAA+B,OAAlBA,EAAgBC,EAAA,CAb5BC,EAAAA,SAAS,CACRC,QAAS,GAITC,QAAOC,EACFN,GAGLO,aAAYD,EACPN,MAGMC,GAAb","sourcesContent":["import { ElementRef, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, RendererStyleFlags2 } from '@angular/core';\nimport { StyleDeclaration } from '../interfaces/style-declaration';\nimport { TypeService } from '../services/type.service';\n\nexport abstract class StyleBuilder {\n  public set input(value: any) {\n    let input = this._type.toString(value);\n\n    {\n      let changes = this._differ.diff(input ? this.build(input) : {});\n\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _differ: KeyValueDiffer<string, string | null> = this._keyValueDiffers.find({}).create();\n\n  public constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _keyValueDiffers: KeyValueDiffers,\n    private _renderer: Renderer2,\n\n    private _type: TypeService\n  ) {}\n\n  protected abstract build(input: string): StyleDeclaration;\n\n  private _applyChanges(changes: KeyValueChanges<string, string | null>): void {\n    changes.forEachItem(({ key: style, currentValue: value }) => {\n      this._renderer.setStyle(this._elementRef.nativeElement, style, value, RendererStyleFlags2.DashCase);\n    });\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleBuilder } from '../classes/style-builder';\nimport { StyleDeclaration } from '../interfaces/style-declaration';\n\n@Directive({\n  selector: '[dgElevation]',\n\n  inputs: [\n    'input: dgElevation'\n  ]\n})\nexport class ElevationDirective extends StyleBuilder {\n  public build(input: string): StyleDeclaration {\n    return {\n      'box-shadow': `var(--elevation-z${input}--box-shadow)`\n    };\n  }\n}\n","import { Directive } from '@angular/core';\nimport { StyleBuilder } from '../classes/style-builder';\nimport { StyleDeclaration } from '../interfaces/style-declaration';\n\n@Directive({\n  selector: '[dgTypography]',\n\n  inputs: [\n    'input: dgTypography'\n  ]\n})\nexport class TypographyDirective extends StyleBuilder {\n  public build(input: string): StyleDeclaration {\n    return {\n      'font-size': `var(--typography-${input}--font-size)`,\n      'line-height': `var(--typography-${input}--line-height)`,\n      'font-weight': `var(--typography-${input}--font-weight)`,\n      'font-family': `var(--typography-${input}--font-family)`,\n      'letter-spacing': `var(--typography-${input}--letter-spacing)`\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TypeService {\n  public isVoid(value: any): value is void {\n    return value === undefined || value === null;\n  }\n\n  public toString(value: any): string | null {\n    if (!this.isVoid(value)) {\n      return String(value);\n    }\n\n    return null;\n  }\n\n  public toNumber(value: any): number | null {\n    if (!this.isVoid(value)) {\n      return Number(value);\n    }\n\n    return null;\n  }\n\n  public toBoolean(value: any): boolean | null {\n    if (!this.isVoid(value)) {\n      if (typeof value === 'string') {\n        return value !== 'false';\n      }\n\n      return Boolean(value);\n    }\n\n    return null;\n  }\n\n  public toDate(value: any): Date | null {\n    if (!this.isVoid(value)) {\n      let date = new Date(value);\n\n      return new Date(\n        Date.UTC(\n          date.getFullYear(),\n          date.getMonth(),\n          date.getDate(),\n          date.getHours(),\n          date.getMinutes(),\n          date.getSeconds(),\n          date.getMilliseconds()\n        )\n      );\n    }\n\n    return null;\n  }\n}\n","import { NgModule, Type } from '@angular/core';\n\n// Directives\nimport { ElevationDirective } from './directives/elevation.directive';\nimport { TypographyDirective } from './directives/typography.directive';\n\nconst directives: Type<object>[] = [\n  ElevationDirective,\n  TypographyDirective\n];\n\n@NgModule({\n  imports: [\n\n  ],\n\n  exports: [\n    ...directives\n  ],\n\n  declarations: [\n    ...directives\n  ]\n})\nexport class FoundationModule {}\n"]}