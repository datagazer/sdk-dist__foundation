import { RendererStyleFlags2 } from '@angular/core';
export class StyleBuilder {
    constructor(_elementRef, _keyValueDiffers, _renderer, _type) {
        this._elementRef = _elementRef;
        this._keyValueDiffers = _keyValueDiffers;
        this._renderer = _renderer;
        this._type = _type;
        this._differ = this._keyValueDiffers.find({}).create();
    }
    set input(value) {
        let input = this._type.toString(value);
        {
            let changes = this._differ.diff(input ? this.build(input) : {});
            if (changes) {
                this._applyChanges(changes);
            }
        }
    }
    _applyChanges(changes) {
        changes.forEachItem(({ key: style, currentValue: value }) => {
            this._renderer.setStyle(this._elementRef.nativeElement, style, value, RendererStyleFlags2.DashCase);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUtYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BkYXRhZ2F6ZXIvZm91bmRhdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9jbGFzc2VzL3N0eWxlLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEyRSxtQkFBbUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUk3SCxNQUFNLE9BQWdCLFlBQVk7SUFlaEMsWUFDVSxXQUFvQyxFQUNwQyxnQkFBaUMsRUFDakMsU0FBb0IsRUFFcEIsS0FBa0I7UUFKbEIsZ0JBQVcsR0FBWCxXQUFXLENBQXlCO1FBQ3BDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDakMsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUVwQixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBUHBCLFlBQU8sR0FBMEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQVE5RixDQUFDO0lBcEJKLElBQVcsS0FBSyxDQUFDLEtBQVU7UUFDekIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkM7WUFDRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRWhFLElBQUksT0FBTyxFQUFFO2dCQUNYLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0I7U0FDRjtJQUNILENBQUM7SUFjTyxhQUFhLENBQUMsT0FBK0M7UUFDbkUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUMxRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RHLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgS2V5VmFsdWVDaGFuZ2VzLCBLZXlWYWx1ZURpZmZlciwgS2V5VmFsdWVEaWZmZXJzLCBSZW5kZXJlcjIsIFJlbmRlcmVyU3R5bGVGbGFnczIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0eWxlRGVjbGFyYXRpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0eWxlLWRlY2xhcmF0aW9uJztcbmltcG9ydCB7IFR5cGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdHlwZS5zZXJ2aWNlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0eWxlQnVpbGRlciB7XG4gIHB1YmxpYyBzZXQgaW5wdXQodmFsdWU6IGFueSkge1xuICAgIGxldCBpbnB1dCA9IHRoaXMuX3R5cGUudG9TdHJpbmcodmFsdWUpO1xuXG4gICAge1xuICAgICAgbGV0IGNoYW5nZXMgPSB0aGlzLl9kaWZmZXIuZGlmZihpbnB1dCA/IHRoaXMuYnVpbGQoaW5wdXQpIDoge30pO1xuXG4gICAgICBpZiAoY2hhbmdlcykge1xuICAgICAgICB0aGlzLl9hcHBseUNoYW5nZXMoY2hhbmdlcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZGlmZmVyOiBLZXlWYWx1ZURpZmZlcjxzdHJpbmcsIHN0cmluZyB8IG51bGw+ID0gdGhpcy5fa2V5VmFsdWVEaWZmZXJzLmZpbmQoe30pLmNyZWF0ZSgpO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcml2YXRlIF9rZXlWYWx1ZURpZmZlcnM6IEtleVZhbHVlRGlmZmVycyxcbiAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxuXG4gICAgcHJpdmF0ZSBfdHlwZTogVHlwZVNlcnZpY2VcbiAgKSB7fVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBidWlsZChpbnB1dDogc3RyaW5nKTogU3R5bGVEZWNsYXJhdGlvbjtcblxuICBwcml2YXRlIF9hcHBseUNoYW5nZXMoY2hhbmdlczogS2V5VmFsdWVDaGFuZ2VzPHN0cmluZywgc3RyaW5nIHwgbnVsbD4pOiB2b2lkIHtcbiAgICBjaGFuZ2VzLmZvckVhY2hJdGVtKCh7IGtleTogc3R5bGUsIGN1cnJlbnRWYWx1ZTogdmFsdWUgfSkgPT4ge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBzdHlsZSwgdmFsdWUsIFJlbmRlcmVyU3R5bGVGbGFnczIuRGFzaENhc2UpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=